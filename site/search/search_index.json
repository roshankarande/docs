{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"home/1/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Code Blocks import tensorflow as tf bubble_sort.py def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] try soemthing theme : features : - content.code.annotate # (1) I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown. C C++ #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"Page 1"},{"location":"home/1/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"home/1/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"home/1/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"home/1/#code-blocks","text":"import tensorflow as tf bubble_sort.py def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] try soemthing theme : features : - content.code.annotate # (1) I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown. C C++ #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"Code Blocks"},{"location":"home/2/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. asddsafsdfds","title":"Page n"},{"location":"home/2/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"home/2/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"home/2/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. asddsafsdfds","title":"Project layout"},{"location":"section/1/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. ``` plotly { \"data\": [ { \"x\": [ \"giraffes\", \"orangutans\", \"monkeys\" ], \"y\": [ 20, 14, 23 ], \"type\": \"bar\" } ] }","title":"Page 1"},{"location":"section/1/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"section/1/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"section/1/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. ``` plotly { \"data\": [ { \"x\": [ \"giraffes\", \"orangutans\", \"monkeys\" ], \"y\": [ 20, 14, 23 ], \"type\": \"bar\" } ] }","title":"Project layout"},{"location":"section/2/","text":"Mkdocs Plotly Plugin MkDocs plugin to create interactive charts from data using the declarative plotly 's json syntax. Includes supports for mkdocs-material theme features like instant loading and dark color themes . Installation Install the plugin using pip3 : pip install mkdocs-plotly-plugin And then add the plugin into plugins and the custome fence plugins: - plotly markdown_extensions: - pymdownx.superfences: custom_fences: - name: plotly class: plotly format: !!python/name:mkdocs_plotly_plugin.fences.fence_plotly Usage You can insert any valid plotly JSON as a codeblock using: ``` plotly { \"data\": [ { \"x\": [ \"giraffes\", \"orangutans\", \"monkeys\" ], \"y\": [ 20, 14, 23 ], \"type\": \"bar\" } ] } ``` { \"data\": [ { \"x\": [ \"giraffes\", \"orangutans\", \"monkeys\" ], \"y\": [ 20, 14, 23 ], \"type\": \"bar\" } ] } This is compatiable with snipplets as well ```plotly --8<-- \"assets/data.json\" ``` or you can insert any plotly JSON through URLs ```plotly {\"file_path\": \"./assets/data.json\"} ``` {\"file_path\": \"./assets/data.json\"} !!!note \"Snipplets vs. file path\" Using `snipplets` will insert the json content into the output HTML file, which is more suitable for smaller datasets. Using `file_path` will fetch the json content once the page is loaded. !!!note \"Plotly JSON\" Plotly has its own eco-system for creating charts in most statistical languages. You can output the plot as a json file through `fig.to_json()`. Options Option Default Description lib_path Relative path to local plotly.js file, or leave it blank to use CDN. template_default plotly_min template for plotly charts in light mode template_slate plotly_dark_min template for plotly charts in dark mode enable_template True use template to automatically change theme !!! note Plotly templates Available Plotly templates are [\"plotly\", \"plotly_white\", \"plotly_dark\", \"ggplot2\", \"seaborn\", \"simple_white\", \"none\"] . If you want to customize your own template, you can export it as a JSON file and provide its path in options relative to doc_dir .","title":"Page n"},{"location":"section/2/#mkdocs-plotly-plugin","text":"MkDocs plugin to create interactive charts from data using the declarative plotly 's json syntax. Includes supports for mkdocs-material theme features like instant loading and dark color themes .","title":"Mkdocs Plotly Plugin"},{"location":"section/2/#installation","text":"Install the plugin using pip3 : pip install mkdocs-plotly-plugin And then add the plugin into plugins and the custome fence plugins: - plotly markdown_extensions: - pymdownx.superfences: custom_fences: - name: plotly class: plotly format: !!python/name:mkdocs_plotly_plugin.fences.fence_plotly","title":"Installation"},{"location":"section/2/#usage","text":"You can insert any valid plotly JSON as a codeblock using: ``` plotly { \"data\": [ { \"x\": [ \"giraffes\", \"orangutans\", \"monkeys\" ], \"y\": [ 20, 14, 23 ], \"type\": \"bar\" } ] } ``` { \"data\": [ { \"x\": [ \"giraffes\", \"orangutans\", \"monkeys\" ], \"y\": [ 20, 14, 23 ], \"type\": \"bar\" } ] } This is compatiable with snipplets as well ```plotly --8<-- \"assets/data.json\" ``` or you can insert any plotly JSON through URLs ```plotly {\"file_path\": \"./assets/data.json\"} ``` {\"file_path\": \"./assets/data.json\"} !!!note \"Snipplets vs. file path\" Using `snipplets` will insert the json content into the output HTML file, which is more suitable for smaller datasets. Using `file_path` will fetch the json content once the page is loaded. !!!note \"Plotly JSON\" Plotly has its own eco-system for creating charts in most statistical languages. You can output the plot as a json file through `fig.to_json()`.","title":"Usage"},{"location":"section/2/#options","text":"Option Default Description lib_path Relative path to local plotly.js file, or leave it blank to use CDN. template_default plotly_min template for plotly charts in light mode template_slate plotly_dark_min template for plotly charts in dark mode enable_template True use template to automatically change theme !!! note Plotly templates Available Plotly templates are [\"plotly\", \"plotly_white\", \"plotly_dark\", \"ggplot2\", \"seaborn\", \"simple_white\", \"none\"] . If you want to customize your own template, you can export it as a JSON file and provide its path in options relative to doc_dir .","title":"Options"}]}